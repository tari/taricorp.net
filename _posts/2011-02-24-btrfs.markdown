---
author: tari
comments: true
date: 2011-02-24 01:46:09+00:00
layout: post
slug: btrfs
title: Btrfs
wordpress_id: 203
categories:
- Linux
tags:
- btrfs
- Software
- storage
---

I recently converted the root filesystem on my netbook, a now rather old [Acer
Aspire
One](http://web.archive.org/web/20110615103656/http://www.acer.com/aspireone/aspireone_8_9/)
with an incredibly slow 1.8" Flash SSD, from the ext3 I had been using for quite
a while to the shiny new [btrfs](http://en.wikipedia.org/wiki/Btrfs), which
becomes more stable every time the Linux kernel gets updated. As I don't keep
any data of particular importance on there, I had no problem with running an
experimental filesystem on it.

Not only was the conversion relatively painless, but the system now performs
better than it ever did with ext3/4.

## Conversion

Btrfs supports a nearly painless conversion from ext2/3/4 due to its flexible
design. Because btrfs has almost no fixed locations for metadata on the disc, it
is actually possible to allocate btrfs metadata inside the free space in an ext
filesystem. Given that, all that's required to convert a filesystem is to run
[btrfs-convert](https://btrfs.wiki.kernel.org/index.php/Conversion_from_Ext3) on
it- the only requirement is that the filesystem not be mounted.

As the test subject of this experiment was just my netbook, this was easy, since
I keep a rather simple partition layout on that machine. In fact, before the
conversion, I had a single 8GB ext4 partition on the system's rather pathetic
SSD, and that was the extent of available storage. After backing up the contents
of my home directory to another machine, I proceeded to decimate the contents of
my home directory and drop the amount of storage in-use from about 6GB to more
like 3GB, a healthy gain.

### Linux kernel

To run a system on Btrfs, there must, of course, be support for it in the
kernel. Because I customarily build my own kernels on my netbook, it was a
simple matter of enabling Btrfs support and rebuilding my kernel image. Most
distribution kernels probably won't have such support enabled since the
filesystem is still under rather heavy development, so it was fortunate that my
setup made it so easy.

### GRUB

The system under consideration runs GRUB 2, currently version 1.97, which has no
native btrfs support. That's a problem, as I was hoping to only have a single
partition. With a little research, it was easy to find that no version of GRUB
currently supports booting from btrfs, although there is an experimental
patchset with provides basic btrfs support in a module. Unfortunately, to load a
module, GRUB needs to be able to read the partition in which the module resides.
If my /boot is on btrfs, that's a bit troublesome. Thus, the only option is for
me to create a separate partition for /boot, containing GRUB's files and my
Linux kernel image to boot, formatted with some other file system. The obvious
choice was the tried-and-true ext3.

This presents a small problem, in that I need to resize my existing root
partition to make room on the disc for a small /boot partition. Easily remedied,
however, with application of the [Ultimate Boot
CD](http://www.ultimatebootcd.com/), which includes the wonderful [Parted
Magic](http://partedmagic.com/). GParted, included in Parted Magic, made short
work of resizing the existing partition and its filesystem, as well as moving
that partition to the end of the disc, which eventually left me with a shiny new
ext3 partition filling the first 64MB of the disc.

## Repartitioning

After creating my new /boot partition, it was a simple matter of copying the
contents of /boot on the old partition to the new one, adjusting the fstab, and
changing my kernel command line in the GRUB config file to mount /dev/sda2 as
root rather than sda1.

Move the contents of /boot:

```
$ mount /dev/sda1 /mnt/boot
$ cp -a /boot /mnt/boot
$ rm -r /boot
```

Updated fstab:

```
/dev/sda1       /boot   ext3    defaults    0 1
/dev/sda2       /       btrfs   defaults    0 1
```

## Finishing up

Finally, it was time to actually run btrfs-convert. I booted the system into the
[Arch Linux](https://www.archlinux.org/) installer (mostly an arbitrary choice,
since I had that image laying around) and installed the btrfs utilities package
(btrfs-progs-unstable) in the live environment. Then it was a simple matter of
running btrfs-convert on /dev/sda2 and waiting about 15 minutes, during which
time the disc was being hit pretty hard. Finally, a reboot.

..following which the system failed to come back up, with GRUB complaining
loudly about being unable to find its files. I booted the system from the Arch
installer once again and ran grub-install on sda1 in order to reconfigure GRUB
to handle the changed disc layout. With another reboot, everything was fine.

With my new file system in place, I took some time to tweak the mount options
for the new partition. Btrfs is able to tune itself for solid-state devices, and
will set those options automatically. From the [Btrfs
FAQ](https://btrfs.wiki.kernel.org/index.php/FAQ#Is_Btrfs_optimized_for_SSD.3F):


> There are some optimizations for SSD drives, and you can enable them by
> mounting with -o ssd. As of 2.6.31-rc1, this mount option will be enabled if
> Btrfs is able to detect non-rotating storage.

However, there's also a `ssd_spread` option:

> Mount `-o ssd_spread` is more strict about finding a large unused region of the
> disk for new allocations, which tends to fragment the free space more over
> time. Mount `-o ssd_spread` is often faster on the less expensive SSD
> devices

That sounds exactly like my situation- a less expensive SSD device which is very
slow when doing extensive writes to ext3/4. In addition to `ssd_spread`, I turned
on the `noatime` option for the filesystem, which cuts down on writes at the
expense of not recording access times for files and directories on the file
system. As I'm seldom, if ever, concerned with access times, and especially so
on my netbook, I lose nothing from such a change and gain (hopefully) increased
performance.

Thus, my final (optimized) fstab line for the root filesystem:

```
/dev/sda2       /       btrfs   defaults,noatime,ssd_spread    0
```

## Results

After running with the new setup for about a week and working on normal tasks
with it, I can safely say that on my AA1, Btrfs with `ssd_spread` is significantly
more responsive than ext4 ever was. While running Firefox, for example, the
system would sometimes stop responding to input while hitting the disc fairly
hard.

With Btrfs, I no longer have any such problem- everything remains responsive
even under fairly high I/O load (such as while Firefox is downloading data from
[Firefox Sync](https://wiki.mozilla.org/Firefox_Sync), or when I'm applying
updates).
